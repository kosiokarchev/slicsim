imports: !import
  - from torch.distributions import PowerTransform
  - from pyro.distributions import Delta, Uniform, Normal, HalfNormal, MultivariateNormal, InverseGamma, TransformedDistribution
  - from clipppy.distributions import conundis, SupportedTransformedDistribution
  - from phytorch.cosmology.module import CosmologyModule
  - from phytorch.cosmology.drivers.analytic import LambdaCDM
defs:
  labels:
    Om0: $\Omega_{m 0}$
    Ode0: $\Omega_{\Lambda 0}$
    sigma_z: $\sigma_z$
    sigma_res: $\sigma_{\mathrm{res}}$
    mean_M0: $M_0$
    alpha: $\alpha$
    beta: $\beta$
    mean_x1: $\hat{x}_1$
    log10_R_x1: $\log_{10} R_{x_1}$
    mean_c: $\hat{c}$
    log10_R_c: $\log_{10} R_{c}$

  zcmb: &zcmb !pt {{ zcmb_name }}
  vars_scale_tril: &vars_scale_tril !pt {{ vars_scale_tril_name }}
  vars: &vars !@ [*vars_scale_tril, !py:torch.Tensor.transpose [*vars_scale_tril, -2, -1]]
  N: &N !py:len [*zcmb]

  cosmo: &cosmo !py:CosmologyModule
    cls: !py:LambdaCDM
    method: distmod
    unsqueeze: 1

  priors:
    Om0: &prior_Om0 !py:Uniform [0, 2]
    Ode0: &prior_Ode0 !py:Uniform [0, 2]
    alpha: &prior_alpha !py:Uniform [0, 1]
    beta: &prior_beta !py:Uniform [0, 4]
    sigma_z: &prior_sigma_z !py:SupportedTransformedDistribution
      - !py:conundis.InverseGamma {/: 0.0003, /: 0.0003, constraint_lower: !eval 1e-3**2, constraint_upper: !eval 0.2**2}
      - [!py:PowerTransform [0.5]]
    mean_M0: &prior_mean_M0 !py:Normal [-19.3, 2]
    sigma_res: &prior_sigma_res !py:SupportedTransformedDistribution
      - !py:conundis.InverseGamma {/: 0.003, /: 0.003, constraint_lower: !eval 1e-3**2, constraint_upper: 1}
      - [!py:PowerTransform [0.5]]

{#    mean_x1: &prior_mean_x1 !py:Normal [0., 10.]#}
{#    log10_R_x1: &prior_log10_R_x1 !py:Uniform [-5, 2]#}
{#    log10_R_x: &prior_log10_R_c !py:Uniform [-5, 2]#}
{#    mean_c: &prior_mean_c !py:Normal [0., 1.]#}
{#    mean_x1: &prior_mean_x1 !py:conundis.Normal {/: 0., /: 10., constraint_lower: -1., constraint_upper: 1.}#}
{#    mean_c: &prior_mean_c !py:conundis.Normal {/: 0., /: 1., constraint_lower: -.1, constraint_upper: 0.1}#}
    mean_x1: &prior_mean_x1 !py:Uniform [-1., 1.]
    sampler_mean_x1: &sampler_mean_x1 !Sampler:mean_x1 {/: *prior_mean_x1, init: 0.}
    log10_R_x1: &prior_log10_R_x1 !py:Uniform [-0.2, 0.2]
    sampler_R_x1: &sampler_R_x1 !Effect
      - !eval "lambda x: 10**x"
      - !Sampler:log10_R_x1 {/: *prior_log10_R_x1, init: !py:math.log10 1.}
    mean_c: &prior_mean_c !py:Uniform [-0.1, 0.1]
    sampler_mean_c: &sampler_mean_c !Sampler:mean_c { /: *prior_mean_c, init: 0. }
    log10_R_x: &prior_log10_R_c !py:Uniform [-1.2, -0.8]
    sampler_R_c: &sampler_R_c !Effect
      - !eval "lambda x: 10**x"
      - !Sampler:log10_R_c {/: *prior_log10_R_c, init: !py:math.log10 0.1}

{% if not gen %}
  data: &data !pt {{ data_name }}
conditioning:
  data: ![] [*data, data]
{% endif %}
model: !Sampler:data
  to_event: 1
  /: !Stochastic
    - !py:MultivariateNormal
    - loc: !Stochastic
        - !py:stack_data
        - m: !Deterministic:m
            event_dim: 1
            /: !Stochastic
              - !+
              - a: !Effect
                  - !py:torch.Tensor.detach
                  - !Deterministic:distmod
                    event_dim: 1
                    /: !Effect
                      - !eval "lambda x: x.detach()"
                      - !Stochastic
                        - *cosmo
                        - z: !AllEncapsulator
                            - !Effect
                              - !eval "lambda x: x.clone().requires_grad_()"
                              - !Sampler:z { /: !py:Delta [*zcmb], to_event: 1 }
                            - &z
                          Om0: !Sampler { /: *prior_Om0, init: 0.3 }
                          Ode0: !Sampler { /: *prior_Ode0, init: 0.7 }
                        - &distmod
                {% if collapse|default(True) %}
                b: !UnsqueezeEffect
                  - !Stochastic
                {% else %}
                b: !Stochastic
                {% endif %}
                    - !py:phillips
                    - alpha: !AllEncapsulator
                        - !Sampler {/: *prior_alpha, init: 0.14}
                        - &alpha
                      beta:  !AllEncapsulator
                        - !Sampler {/: *prior_beta, init: 3.1}
                        - &beta
                      {% if collapse|default(True) %}
                      M0: !Sampler:mean_M0 {/: *prior_mean_M0, init: -19.5}
                      x1: !AllEncapsulator [*sampler_mean_x1, &x1]
                      c:  !AllEncapsulator [*sampler_mean_c, &c]
                      {% else %}
                      M0: !Sampler
                        /: !Stochastic
                          - !py:Normal
                          - loc: !Sampler:mean_M0 { /: *prior_mean_M0, init: -19.5 }
                            scale: !Sampler:sigma_res { /: *prior_sigma_res, init: 0.1 }
                        indep: [ *N ]
                        to_event: 0

                      {% for varname in ('x1', 'c') %}
                      {{ varname }}: !AllEncapsulator
                        - !Sampler
                          /: !Stochastic
                            - !py:Normal
                            - loc: !Sampler:mean_{{ varname }}
                                /: *prior_mean_{{ varname }}
                                init: 0.
                              scale: *sampler_R_{{ varname }}
                          indep: [ *N ]
                          to_event: 0
                        - &{{ varname }}
                      {% endfor %}
                      {% endif %}
          {% if collapse|default(True) %}
          x1: !UnsqueezeEffect [*x1]
          c:  !UnsqueezeEffect [*c]
          {% else %}
          x1: *x1
          c: *c
          {% endif %}
      scale_tril: !Effect
        - !py:torch.linalg.cholesky
        - !Stochastic
          - !+
          - a: !Deterministic:priorvars
              event_dim: 3
              /: !Stochastic
                - !py:marginal_variance
                - alpha: *alpha
                  beta:  *beta
                  {% if collapse|default(True) %}
                  sigma_res: !Sampler {/: *prior_sigma_res, init: 0.1}
                  R_x1: *sampler_R_x1
                  R_c: *sampler_R_c
                  {% endif %}
                  {% if photoz|default(False) %}
                  R_z: !Deterministic
                    event_dim: 1
                    /: !Stochastic
                      - !*
                      - a: !Deterministic:dmu_dz
                          event_dim: 1
                          /: !Stochastic
                            - !py:d_dz
                            - out: *distmod
                              z: *z
                        b: !Stochastic
                          - !*
                          - a: !UnsqueezeEffect
                              - !Sampler:sigma_z {/: *prior_sigma_z, init: 0.04}
                            b: !Stochastic [!+ , {a: 1, b: *zcmb}]
                  {% endif %}
            b: !Deterministic:likevars [*vars]
lightning_nre:
  param_names:
    - Om0
    - Ode0
    {% if photoz|default(False) %}
    - sigma_z
    {% endif %}
    - mean_M0
    - sigma_res
    - alpha
    - beta
    - mean_x1
    - log10_R_x1
    - mean_c
    - log10_R_c
    {% if latent|default(False) %}
    - M0
    {% endif %}
  obs_names: [ data ]
  dataset_config: !py:clipppy.commands.lightning.config.DatasetConfig
    cls: !py:clipppy.commands.nre.CPDataset
    kwargs:
      ranges:
        mean_M0: [ -21, -18 ]
        mean_x1: [ -3., 3. ]
        mean_c: [ -0.3, 0.3 ]

imports: !import
  - from pyro.distributions import Exponential, HalfCauchy, LKJCholesky, MultivariateNormal, Normal, Uniform
  - from snai.tossn.sources.bayesn import BayeSN
  - from snai.tossn.bandpasses import sdss_u, sdss_g, sdss_r, sdss_i, sdss_z, nic2_f110w, nic2_f160w
  - from phytorch.cosmology.drivers.analytic import LambdaCDM
  - from snai.tossn.sources.effects import Cosmology, Redshifted
defs:
  N: &N {{ N|default(100) }}
  ngrid: &ngrid {{ ngrid }}
  nlayers: &nlayers {{ nlayers|default(1) }}

  src: &src !Stochastic
    - !py:BayeSN []
    - Rv: !py:Uniform [1, 5]
      Av: !Sampler
        /: !Stochastic
          - !py:Exponential
          - rate: !Stochastic
            - !eval "lambda tau: 1/tau"
            - tau: !py:HalfCauchy [{{ 0.1 if gen else 1 }}]  # TODO: prior: 1, gen: 0.1
        expand_by: [*N]
      E: !Sampler
        /: !Stochastic:E
          - !py:MultivariateNormal
          - loc: !py:torch.zeros [*ngrid]
            scale_tril: !Stochastic
              - !py:get_scale_tril
              - scale: !Sampler
                  d: !py:HalfCauchy [{{ 0.01 if gen else 1 }}]  # TODO: prior: 1, gen: < 1 (0.01)
                  expand_by: [*ngrid]
                tril: !py:LKJCholesky [*ngrid]
        expand_by: [*N]
      delta_M: !Sampler
        /: !Stochastic:delta_M
          - !py:Normal
          - loc: 0.
            scale: !py:HalfCauchy [0.1]
        expand_by: [*N]
      theta: !Sampler
        /: !py:Normal [0., 1.]
        expand_by: [*N, *nlayers]
      W: !Sampler
        /: !py:Normal [0., {{ 0.1 if gen else 1 }}]  # TODO: prior: 1, gen: 0.1
        expand_by: [*nlayers, *ngrid]
      W0: !Sampler
        /: !py:Normal [0., {{ 0.1 if gen else 1 }}]  # TODO: prior: 1, gen: 0.1
        expand_by: [*ngrid]
  times: &times !py:torch.linspace [-10, 40, 51]
  filters: &filters [!py:sdss_u , !py:sdss_g , !py:sdss_r , !py:sdss_i , !py:sdss_z , !py:nic2_f110w , !py:nic2_f160w ]

  cosmo: &cosmo !py:LambdaCDM [ ]

  model: &model !Stochastic
    - !py:Model
      times: *times
      filters: *filters
      source: !Stochastic
        - !py:Cosmology {base: *src, cosmo: *cosmo}
        - z_cosmo: !Sampler
            /: !py:Uniform [ 0.2, 1. ]
            expand_by: [ *N ]
    - cosmo: *cosmo
      Om0: !Sampler
        /: !py:Uniform [0.01, 0.99]
        init: 0.3
      Ode0: !Sampler
        /: !py:Uniform [0.01, 0.99]
        init: 0.7

  {%- if not gen %}
  data: !pt {/: {{ mockname }}, map_location: cuda}
  {%- endif %}
model: !Sampler:obs
  /: !Stochastic
    - !py:Normal
    - scale: 0.02
      loc: *model
guide:
  {%- filter indent(2) %}
  {%- block guide %}{% endblock %}
  {%- endfilter %}
{%- if gen %}
mock:
  savename: {{ mockname }}
{%- endif %}